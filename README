Step 1: Set Up Your Project
# Create a directory for your project
  mkdir vault-docker-example
  cd vault-docker-example

Step 2: Write Docker Compose YAML
# Create a docker-compose.yml file with the following content:
  version: '3.7'

  services:
    vault:
      image: vault
      environment:
        - VAULT_DEV_ROOT_TOKEN_ID=myroot
        - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      ports:
        - "8200:8200"
      command: vault server -dev

    echo-server:
      image: jmalloc/echo-server
      ports:
        - "8080:8080"
      environment:
        - MESSAGE=HelloFromEchoServer

    proxy:
      image: traefik
      command:
        - --api.insecure=true
        - --providers.docker=true
      ports:
        - "80:80"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock:ro

  networks:
    default:
      external:
        name: proxy


# This docker-compose.yml file does the following:
  i.    Launches a Vault container in development mode.
  ii.   Deploys an echo server.
  iii.  Configures Traefik as a reverse proxy with basic authentication.
  iv.   All services are connected to an external network named "proxy."



Step 3: Create a Traefik Configuration
#  Create a traefik.toml file for Traefik configuration:
[entryPoints]
  [entryPoints.http]
    address = ":80"
    [entryPoints.http.auth]
      [entryPoints.http.auth.basic]
        users = ["your_username:your_password"]

# Replace "your_username" and "your_password" with your desired credentials.#

Step 4: Run the Project

docker-compose up -d

# This will start the Vault server, echo server, and Traefik proxy in the background.

Step 5: Configure Vault

#In a real-world scenario, you would use the Vault HTTP API to store and retrieve secrets securely.

For this example, let's use the Vault command line
  export VAULT_ADDR=http://127.0.0.1:8200
  export VAULT_TOKEN=myroot

# Store a secret 
  vault kv put secret/myapp/config username=admin password=secretpassword

# Retrieve a secret 
vault kv get secret/myapp/config

Step 6: Access the Echo Server
  Visit http://localhost and use the basic authentication credentials you set in the traefik.toml file.
  You should see the echo server response.

#Step 7: Bonus Points

Vault HTTP API: In a production setup, use the Vault HTTP API for managing secrets securely.

Docker Swarm: Modify the docker-compose.yml file to use Docker Swarm instead of the default network.

Docker HTTP API: For more advanced setups, you can use Docker's HTTP API directly.

TLS Termination: Enhance the Traefik configuration to enable TLS termination for secure communication.

Step 8: Commit to Git

git init
git add .
git commit -m "Initial commit"
git push




